extend type Query {
    # DataSource Query
    queryDataSource(loginUser: InputUser!, id: Int!): QueryDataSourceResultType
    queryDataSourceList(loginUser: InputUser!, dbType: DbType): DataSourceListResultType
    queryDataSourceListPaging(loginUser: InputUser!, searchVal: String,
        pageNo: Int!, pageSize: Int!): QueryDataSourceListPagingResultType
    connectDataSource(loginUser: InputUser!,
        dataSourceParam: InputBaseDataSourceParamDTO!): NormalResultType
    connectionTest(loginUser: InputUser!, id: Int): NormalResultType
    verifyDataSourceName(loginUser: InputUser!, name: String!): NormalResultType
    unauthDatasource(loginUser: InputUser!, userId: Int!): DataSourceListResultType
    authedDatasource(loginUser: InputUser!, userId: Int!): DataSourceListResultType
    getKerberosStartupState(loginUser: InputUser!): NormalResultType
}

extend type Mutation {
    # DataSource Mutation
    createDataSource(loginUser: InputUser!, dataSourceParam: InputBaseDataSourceParamDTO!): NormalResultType
    updateDataSource(loginUser: InputUser!, dataSourceParam: InputBaseDataSourceParamDTO!): NormalResultType
    deleteDataSource(loginUser: InputUser!, id: Int): NormalResultType
}

input InputBaseDataSourceParamDTO {
    database: String
    host: String
    id: Int
    name: String
    note: String
    other: String
    password: String
    port: Int
    dbType: String
    userName: String
}

type BaseDataSourceParamDTO {
    database: String
    host: String
    id: Int
    name: String
    note: String
    other: String
    password: String
    port: Int
    dbType: String
    userName: String
}

enum DbType {
    MYSQL
    POSTGRESQL
    HIVE
    SPARK
    CLICKHOUSE
    ORACLE
    SQLSERVER
    DB2
}

enum DbConnectType {
    ORACLE_SERVICE_NAME
    ORACLE_SID
}

type QueryDataSourceResultType {
    code: Int
    msg: String
    data: BaseDataSourceParamDTO
    success: Boolean
    failed: Boolean
}

#type QueryDataSourceType {
#    name: String
#    note: String
#    dbType: DbType
#    host: String
#    port: String
#    database: String
#    principal: String
#    userName: String
#    password: String
#    other: String
#}

type DataSourceListResultType {
    code: Int
    msg: String
    data: [DataSource]
    success: Boolean
    failed: Boolean
}

type DataSource {
    id: Int
    userId: Int
    userName: String
    name: String
    note: String
    dbType: DbType
    connectionParams: String
    createTime: String
    updateTime: String
}

type QueryDataSourceListPagingResultType {
    code: Int
    msg: String
    data: DataSourcePageInfo
    success: Boolean
    failed: Boolean
}

type DataSourcePageInfo {
    totalList: [DataSource]
    total: Int
    currentPage: Int
    totalPage: Int
}
