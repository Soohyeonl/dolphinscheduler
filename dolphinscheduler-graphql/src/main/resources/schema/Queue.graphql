extend type Query {
    # Queue Query
    queryQueueList(loginUser: InputUser!): QueueListResultType

    queryQueueListPaging(loginUser: InputUser!, pageNo: Int!,
        searchVal: String, pageSize: Int!): QueuePageInfoResultType

    verifyQueue(loginUser: InputUser!, queue: String!,
        queueName: String!): NormalResultType
}

extend type Mutation {
    # Queue Mutation
    createQueue(loginUser: InputUser!, queue: String!,
        queueName: String!): NormalResultType

    updateQueue(loginUser: InputUser!, id: Int!, queue: String!,
        queueName: String!): NormalResultType
}

type Queue {
    id: Int
    queueName: String
    queue: String
    createTime: String
    updateTime: String
}

type QueueListResultType {
    code: Int
    msg: String
    data: [Queue]
    success: Boolean
    failed: Boolean
}

type QueuePageInfo {
    totalList: [Queue]
    total: Int
    currentPage: Int
    totalPage: Int
}

type QueuePageInfoResultType {
    code: Int
    msg: String
    data: QueuePageInfo
    success: Boolean
    failed: Boolean
}
