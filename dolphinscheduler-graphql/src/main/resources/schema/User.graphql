extend type Query {
    # User Query
    queryUserList(loginUser: InputUser!, pageNo: Int!, pageSize: Int!,
        searchVal: String): UserPageInfoResultType

    getUserInfo(loginUser: InputUser!): UserResultType

    listUser(loginUser: InputUser!): UserListResultType

    listAll(loginUser: InputUser!): UserListResultType

    verifyUserName(loginUser: InputUser!, userName: String!): NormalResultType

    unauthorizedUser(loginUser: InputUser!, alertgroupId: Int!): UserListResultType

    authorizedUser(loginUser: InputUser!, alertgroupId: Int!): UserListResultType

    batchActivateUser(loginUser: InputUser!, userNames: [String]): NormalResultType
}

extend type Mutation {
    # User Mutation
    createUser(loginUser: InputUser!, userName: String!, userPassword: String!,
        tenantId: Int!, queue: String="", email: String!, phone: String,
        state: Int): NormalResultType

    updateUser(loginUser: InputUser!, id: Int!, userName: String!,
        userPassword: String!, queue: String="", email: String!,
        tenantId: Int!, phone: String, state: Int): NormalResultType

    delUserById(loginUser: InputUser!, id: Int!): NormalResultType

    grantProject(loginUser: InputUser!, userId: Int!, projectIds: String!): NormalResultType

    grantResource(loginUser: InputUser!, userId: Int!, resourceIds: String!): NormalResultType

    grantUDFFunc(loginUser: InputUser!, userId: Int!, udfIds: String!): NormalResultType

    grantDataSource(loginUser: InputUser!, userId: Int!, datasourceIds: String!): NormalResultType

    registerUser(userName: String!, userPassword: String!,
        repeatPassword: String!, email: String!): UserResultType

    activateUser(loginUser: InputUser!, userName: String!): NormalResultType
}

type User {
    id: Int
    userName: String
    userPassword: String
    email: String
    phone: String
    userType: UserType
    tenantId: Int
    state: Int
    tenantCode: String
    queueName: String
    alertGroup: String
    queue: String
    createTime: String
    updateTime: String
}

type UserResultType {
    code: Int
    msg: String
    data: User
    success: Boolean
    failed: Boolean
}

type UserListResultType {
    code: Int
    msg: String
    data: [User]
    success: Boolean
    failed: Boolean
}

type UserPageInfo {
    totalList: [User]
    total: Int
    currentPage: Int
    totalPage: Int
}

type UserPageInfoResultType {
    code: Int
    msg: String
    data: UserPageInfo
    success: Boolean
    failed: Boolean
}
