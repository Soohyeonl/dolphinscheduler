extend type Query {
    # Project Query
    queryProjectByCode(
        loginUser: InputUser!,
        code: String!
    ): ProjectResultType

    queryProjectListPaging(
        loginUser: InputUser!,
        searchVal: String,
        pageSize: Int!,
        pageNo: Int!
    ): ProjectPageInfoResultType

    queryUnauthorizedProject(loginUser: InputUser!, userId: Int!): ProjectListResultType

    queryAuthorizedProject(loginUser: InputUser!, userId: Int!): ProjectListResultType

    queryProjectCreatedAndAuthorizedByUser(loginUser: InputUser!): ProjectListResultType

    queryAllProjectList(loginUser: InputUser!): ProjectListResultType
}

extend type Mutation {
    # Project Mutation
    createProject(
        loginUser: InputUser!,
        projectName: String!,
        description: String
    ): CreateProjectResultType

    updateProject(
        loginUser: InputUser!,
        code: String!,
        projectName: String!,
        description: String,
        userName: String!
    ): NormalResultType

    deleteProject(
        loginUser: InputUser!,
        code: String!
    ): NormalResultType
}

type CreateProjectResultType {
    code: Int
    msg: String
    data: Int
    success: Boolean
    failed: Boolean
}

type ProjectResultType {
    code: Int
    msg: String
    data: Project
    success: Boolean
    failed: Boolean
}

type Project {
    id: Int
    userId: Int
    userName: String
    code: String
    name: String
    description: String
    createTime: String
    updateTime: String
    perm: Int
    defCount: Int
    instRunningCount: Int
}

type ProjectPageInfoResultType {
    code: Int
    msg: String
    data: ProjectPageInfo
    success: Boolean
    failed: Boolean
}

type ProjectPageInfo {
    totalList: [Project]
    total: Int
    currentPage: Int
    totalPage: Int
}

type ProjectListResultType {
    code: Int
    msg: String
    data: [Project]
    success: Boolean
    failed: Boolean
}

